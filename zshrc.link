#!/usr/bin/zsh

#zmodload zsh/zprof

ZHOME=~/.zsh/

PURE_PROMPT_SYMBOL=λ
PURE_GIT_PULL=0

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        pushd "$HOME/.zinit/bin" && \
        git checkout c27bf53f060d4584333ebdff8cfcd6aed60ca430 && \
        popd && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi


source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

#################################################################
# PROMPT SETTINGS
#
# This settings are applied immidiately (because we need to show
# prompt as fast as possible), so the plugins are being loaded
# eagerly.
#

# Python virtual environment name
#AGKOZAK_CUSTOM_PROMPT='%(10V.%B%F{green}(%10v)%f%b.)'
# Username and hostname
#AGKOZAK_CUSTOM_PROMPT+='%(!.%S%B.%B%F{yellow})%n%1v%(!.%b%s.%f%b) '
# Path
#AGKOZAK_CUSTOM_PROMPT+=$'%B%F{green}%2v%f%b '
# Prompt character
#AGKOZAK_CUSTOM_PROMPT+='%B%F{red}%(4V.:.%#)%f%b '
# Git status
AGKOZAK_CUSTOM_SYMBOLS=( '⇣⇡' '⇣' '⇡' '+' 'x' '!' '>' '?' 'S')
AGKOZAK_CUSTOM_RPROMPT='%(3V#%F{yellow}($prompt_git_tag %7v)%f#)'
#AGKOZAK_CUSTOM_RPROMPT='%(3V.%F{yellow}%3v%f.)'
# Exit status
AGKOZAK_CUSTOM_RPROMPT+=' %(?..%B%F{red}(%?%)%f%b)'
# Execution time
AGKOZAK_CMD_EXEC_TIME=1
AGKOZAK_CUSTOM_RPROMPT+=' %B%F{green}%9v%f%b'
# Display the time
AGKOZAK_CUSTOM_RPROMPT+=' %F{033}%*'
AGKOZAK_PROMPT_CHAR=( λ λ ❮ )
AGKOZAK_COLORS_PROMPT_CHAR='magenta'
AGKOZAK_USER_HOST_DISPLAY=0
AGKOZAK_BLANK_LINES=1
AGKOZAK_PROMPT_DIRTRIM=0

zinit load romkatv/zsh-prompt-benchmark
zinit load agkozak/agkozak-zsh-prompt

# plugins
zinit light Aloxaf/fzf-tab
zinit light djui/alias-tips
zinit light chrissicool/zsh-256color
zinit light zsh-users/zsh-history-substring-search
zinit light paulirish/git-open
#zinit light MichaelAquilina/zsh-auto-notify
zinit load marzocchi/zsh-notify

#source $ZHOME/run_rcs
setopt EXTENDED_GLOB NULL_GLOB
for f in "${ZHOME}/snippets"/*~(*~)(n); do
    zinit ice nocompile
    zinit snippet "$f"
done
unsetopt NULL_GLOB

# completions

# Terraform
autoload -U +X bashcompinit && bashcompinit

# Generate completions for
# * pyenv     - python version management script
# * poetry    - python package manager
# * cargo     - rust package manager
# * rustup    - rust toolchain installer
# * restic    - backup tool
# * pipx      - tool for installing isolated python packages
# * terraform - cloud infrastructure management tool
#
zinit atpull'%atclone' for \
    has'pyenv'  id-as'pyenv'  atclone"pyenv init - --no-rehash         > pyenv.plugin.zsh"    zdharma/null \
    has'poetry' id-as'poetry' atclone"poetry completions zsh           > _poetry"             zdharma/null \
    has'rustup' id-as'cargo'  atclone"rustup completions zsh cargo     > _cargo"              zdharma/null \
    has'rustup' id-as'rustup' atclone"rustup completions zsh cargo     > _rustup"             zdharma/null \
    has'restic' id-as'restic' atclone"restic generate --zsh-completion   _restic"             zdharma/null \
    has'pipx'   id-as'pipx'   atclone"register-python-argcomplete pipx > pipx.plugin.zsh" \
        has'register-python-argcomplete' zdharma/null \
    has'terraform' id-as'terraform' \
        atclone'<<<"complete -o nospace -C /usr/local/bin/terraform terraform" > terraform.plugin.zsh' zdharma/null \


# Completions for
# * git-flow
# * nix package manager
# * ansible
#
zinit for \
    has'git-flow' bobthecow/git-flow-completion \
    has'ansible'  nojanath/ansible-zsh-completion

zinit creinstall -q ${ZHOME}/completions

#################################################################
# IMPORTANT PLUGINS
#

# Additional completion definitions
zinit ice blockf #atclone'zinit creinstall -q .' atpull'%atclone'
zinit load zsh-users/zsh-completions

# History search by `Ctrl+R`
#zinit load zdharma/history-search-multi-word

# Syntax highlighting
zinit ice atinit"zpcompinit; zpcdreplay"
zinit load zdharma/fast-syntax-highlighting

# # Autosuggestions
# export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1
zinit ice blockf atload'!_zsh_autosuggest_start'
zinit load zsh-users/zsh-autosuggestions


# `...` ==> `../..`
# zinit ice lucid wait"0b" pick"manydots-magic"
zinit load lainiwa/zsh-manydots-magic


# Pure Prompt
#zinit ice pick"async.zsh" src"pure.zsh"
#zinit load sindresorhus/pure

# fzf
export FZF_DEFAULT_COMMAND='fd --type f'
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -100'"
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {}'"

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

eval "$(gimme 1.16.6)"

export GOPATH=/Users/bruce/go

# profiling zsh startup
#zprof

source /Users/bruce/Library/Application Support/org.dystroy.broot/launcher/bash/br
